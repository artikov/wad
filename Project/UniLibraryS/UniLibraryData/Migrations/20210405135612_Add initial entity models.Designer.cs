// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using UniLibraryData;

namespace UniLibraryData.Migrations
{
    [DbContext(typeof(UniLibraryContext))]
    [Migration("20210405135612_Add initial entity models")]
    partial class Addinitialentitymodels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UniLibraryData.Models.BranchHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BranchId");

                    b.Property<int>("CloseTime");

                    b.Property<int>("DayOfWeek");

                    b.Property<int>("OpenTime");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchHours");
                });

            modelBuilder.Entity("UniLibraryData.Models.Checkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IdCardId");

                    b.Property<int>("LibraryBookId");

                    b.Property<DateTime>("Since");

                    b.Property<DateTime>("Until");

                    b.HasKey("Id");

                    b.HasIndex("IdCardId");

                    b.HasIndex("LibraryBookId");

                    b.ToTable("Checkouts");
                });

            modelBuilder.Entity("UniLibraryData.Models.CheckoutHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CheckedIn");

                    b.Property<DateTime>("CheckedOut");

                    b.Property<int>("IdCardId");

                    b.Property<int>("LibraryBookId");

                    b.HasKey("Id");

                    b.HasIndex("IdCardId");

                    b.HasIndex("LibraryBookId");

                    b.ToTable("CheckoutHistories");
                });

            modelBuilder.Entity("UniLibraryData.Models.IdCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("Fees");

                    b.HasKey("Id");

                    b.ToTable("IdCards");
                });

            modelBuilder.Entity("UniLibraryData.Models.LibraryBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<int?>("LocationId");

                    b.Property<int>("NumberOfCopies");

                    b.Property<int>("StatusId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("LibraryBooks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LibraryBook");
                });

            modelBuilder.Entity("UniLibraryData.Models.LibraryBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("OpenDate");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("LibraryBranches");
                });

            modelBuilder.Entity("UniLibraryData.Models.Reserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("HoldPlaced");

                    b.Property<int?>("IdCardId");

                    b.Property<int?>("LibraryBookId");

                    b.HasKey("Id");

                    b.HasIndex("IdCardId");

                    b.HasIndex("LibraryBookId");

                    b.ToTable("Reserves");
                });

            modelBuilder.Entity("UniLibraryData.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("UniLibraryData.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<int?>("IdCardId");

                    b.Property<string>("LastName");

                    b.Property<int?>("MainLibraryBranchId");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("IdCardId");

                    b.HasIndex("MainLibraryBranchId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UniLibraryData.Models.Book", b =>
                {
                    b.HasBaseType("UniLibraryData.Models.LibraryBook");

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("DeweyIndex")
                        .IsRequired();

                    b.Property<string>("ISBN")
                        .IsRequired();

                    b.ToTable("Book");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("UniLibraryData.Models.Video", b =>
                {
                    b.HasBaseType("UniLibraryData.Models.LibraryBook");

                    b.Property<string>("Director")
                        .IsRequired();

                    b.ToTable("Video");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("UniLibraryData.Models.BranchHours", b =>
                {
                    b.HasOne("UniLibraryData.Models.LibraryBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("UniLibraryData.Models.Checkout", b =>
                {
                    b.HasOne("UniLibraryData.Models.IdCard", "IdCard")
                        .WithMany("Checkouts")
                        .HasForeignKey("IdCardId");

                    b.HasOne("UniLibraryData.Models.LibraryBook", "LibraryBook")
                        .WithMany()
                        .HasForeignKey("LibraryBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniLibraryData.Models.CheckoutHistory", b =>
                {
                    b.HasOne("UniLibraryData.Models.IdCard", "IdCard")
                        .WithMany()
                        .HasForeignKey("IdCardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UniLibraryData.Models.LibraryBook", "LibraryBook")
                        .WithMany()
                        .HasForeignKey("LibraryBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniLibraryData.Models.LibraryBook", b =>
                {
                    b.HasOne("UniLibraryData.Models.LibraryBranch", "Location")
                        .WithMany("LibraryBooks")
                        .HasForeignKey("LocationId");

                    b.HasOne("UniLibraryData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniLibraryData.Models.Reserve", b =>
                {
                    b.HasOne("UniLibraryData.Models.IdCard", "IdCard")
                        .WithMany()
                        .HasForeignKey("IdCardId");

                    b.HasOne("UniLibraryData.Models.LibraryBook", "LibraryBook")
                        .WithMany()
                        .HasForeignKey("LibraryBookId");
                });

            modelBuilder.Entity("UniLibraryData.Models.User", b =>
                {
                    b.HasOne("UniLibraryData.Models.IdCard", "IdCard")
                        .WithMany()
                        .HasForeignKey("IdCardId");

                    b.HasOne("UniLibraryData.Models.LibraryBranch", "MainLibraryBranch")
                        .WithMany("Users")
                        .HasForeignKey("MainLibraryBranchId");
                });
#pragma warning restore 612, 618
        }
    }
}
